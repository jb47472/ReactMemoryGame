{"version":3,"sources":["logo.svg","components/Wrapper/wrapper.js","components/Header/header.js","components/Banner/banner.js","components/CharacterCard/character.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","props","react_default","a","createElement","className","children","Header","align","this","status","score","topScore","Component","Banner","CharacterCard","alt","name","src","image","onClick","shuffle","id","App","state","characters","header","banner","wrapper","map","character","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"suDAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCOzBC,MAJf,SAAiBC,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMK,WCwB1BC,0LAtBP,OAAOL,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBACpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YACbH,EAAAC,EAAAC,cAAA,MAAII,MAAO,QAAX,iBAGJN,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YACbH,EAAAC,EAAAC,cAAA,MAAII,MAAO,UAAX,IAAsBC,KAAKR,MAAMS,SAGrCR,EAAAC,EAAAC,cAAA,OAAKC,UAAY,YACbH,EAAAC,EAAAC,cAAA,MAAII,MAAO,SAAX,WAA4BC,KAAKR,MAAMU,MAAvC,iBAA4DF,KAAKR,MAAMW,oBAdtEC,cCkBNC,0LAfP,OAAOZ,EAAAC,EAAAC,cAAA,OAAKC,UAAY,mBAEhBH,EAAAC,EAAAC,cAAA,MAAII,MAAQ,UAAZ,gBAICN,EAAAC,EAAAC,cAAA,MAAII,MAAQ,UAAZ,uFATIK,oBCqBNE,MAnBf,SAAuBd,GACrB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKY,IAAKf,EAAMgB,KAAMC,IAAKjB,EAAMkB,SAEnCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,uBADF,IAC0BH,EAAMgB,QAIhCf,EAAAC,EAAAC,cAAA,QAAMgB,QAAS,kBAAMnB,EAAMoB,QAAQpB,EAAMqB,KAAKjB,UAAU,WAAxD,yBCiCKkB,6MAxCbC,MAAQ,CACNd,OAAQ,GACRC,MAAO,EACPC,SAAU,EACVa,WAAYA,2EAiBd,OAEEvB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAACsB,EAAD,CAAQhB,OAAUD,KAAKe,MAAMd,OAAQC,MAASF,KAAKe,MAAMb,MAAOC,SAAYH,KAAKe,MAAMZ,WACvFV,EAAAC,EAAAC,cAACuB,EAAD,MACGzB,EAAAC,EAAAC,cAACwB,EAAD,KACAnB,KAAKe,MAAMC,WAAWI,IAAI,SAAAJ,GAAU,OACvCvB,EAAAC,EAAAC,cAAC0B,EAAD,CACER,GAAIG,EAAWH,GACfS,IAAKN,EAAWH,GAChBL,KAAMQ,EAAWR,KACjBE,MAAOM,EAAWN,mBAlCNN,aCGEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5a655449.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"./wrapperStyle.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\r\nimport \"./headerStyle.css\";\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        return <div className = \"headerContainer\">\r\n            <div className = \"row\">\r\n                <div className = \"col-sm-4\">\r\n                    <h4 align= \"left\"> Clicky Game</h4>                \r\n                </div>\r\n\r\n                <div className = \"col-sm-4\">\r\n                    <h4 align= \"middle\"> {this.props.status}</h4>                \r\n                </div>\r\n\r\n                <div className = \"col-sm-4\">\r\n                    <h4 align= \"right\"> Score: {this.props.score} | Top Score: {this.props.topScore}</h4>                \r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n        \r\n        \r\n        \r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport \"./bannerStyle.css\";\r\n\r\nclass Banner extends Component {\r\n\r\n    render() {\r\n        return <div className = \"bannerContainer\">\r\n            \r\n                <h5 align = \"middle\">\r\n                Clicky Game!\r\n                </h5>\r\n\r\n                 <h3 align = \"middle\">\r\n                Click an image to earn points, but don't use the same image more than once!\r\n                </h3>\r\n            \r\n        </div>\r\n        \r\n    }\r\n}\r\n\r\nexport default Banner;\r\n        \r\n        \r\n        ","import React, { Component } from 'react';\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./cardStyle.css\";\r\n// import App from \"./App\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n      <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} />\r\n      </div>\r\n      <div className=\"content\">\r\n        <ul>\r\n          <li>\r\n            <strong>Name:</strong> {props.name}\r\n          </li>\r\n        </ul>\r\n        </div>\r\n          <span onClick={() => props.shuffle(props.id)} className=\"shuffle\">\r\n             ùòÖ\r\n          </span>\r\n    </div>\r\n  );\r\n}\r\nexport default CharacterCard;\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper/wrapper.js\";\nimport Header from './components/Header/header.js';\nimport Banner from './components/Banner/banner.js';\nimport CharacterCard from './components/CharacterCard/character.js';\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n  state = {\n    status: \"\",\n    score: 0,\n    topScore: 0,\n    characters: characters\n  };\n\n//   shuffle() {\n//   const { characters } = this;\n//   let m = characters.length, i;\n\n//   while (m) {\n//     i = Math.floor(Math.random() * m--);\n\n//     [characters[m], characters[i]] = [characters[i], characters[m]];\n//   }\n\n//   return this;\n// }\n\n  render () {\n  return (\n \n    <div className=\"App\"> \n    <Header status = {this.state.status} score = {this.state.score} topScore = {this.state.topScore}/>\n    <Banner/>\n       <Wrapper>\n      {this.state.characters.map(characters => (\n    <CharacterCard\n      id={characters.id}\n      key={characters.id}\n      name={characters.name}\n      image={characters.image}\n    />\n  ))}\n  </Wrapper>\n  </div>\n  \n  )};\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}